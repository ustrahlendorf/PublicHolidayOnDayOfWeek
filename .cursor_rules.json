{
  "rules": [
    {
      "name": "Enforce Project Structure",
      "type": "structure",
      "description": "Ensure the project follows the standard Python project structure with src, tests, config, and deployment directories.",
      "enforcement": "error"
    },
    {
      "name": "Use Virtual Environments",
      "type": "dependency-management",
      "description": "Require the use of a virtual environment (venv, poetry) for package management.",
      "enforcement": "error"
    },
    {
      "name": "Linting and Formatting",
      "type": "code-quality",
      "tools": ["black", "flake8", "isort"],
      "description": "Code must pass black formatting, flake8 linting, and isort imports ordering.",
      "enforcement": "error"
    },
    {
      "name": "Type Checking",
      "type": "code-quality",
      "tool": "mypy",
      "description": "Ensure static type checking is enforced with mypy.",
      "enforcement": "error"
    },
    {
      "name": "AWS IAM Role Authentication",
      "type": "security",
      "description": "AWS authentication must use IAM roles instead of hardcoded credentials.",
      "enforcement": "error"
    },
    {
      "name": "Secure AWS Credentials",
      "type": "security",
      "description": "Prevent storing AWS secrets or credentials in code. Use AWS Secrets Manager or Parameter Store.",
      "enforcement": "error"
    },
    {
      "name": "Use AWS Session Objects",
      "type": "best-practice",
      "description": "Boto3 clients must use session objects instead of global clients.",
      "enforcement": "warning"
    },
    {
      "name": "Unit Testing Enforcement",
      "type": "testing",
      "tool": "pytest",
      "description": "All new code must have accompanying unit tests using pytest. Tests must be written before writing the actual implementation.",
      "enforcement": "error"
    },
    {
      "name": "Mock AWS Services in Tests",
      "type": "testing",
      "tool": "moto",
      "description": "AWS services must be mocked using the moto library in unit tests.",
      "enforcement": "error"
    },
    {
      "name": "Infrastructure as Code",
      "type": "deployment",
      "tools": ["Terraform", "AWS CDK"],
      "description": "Infrastructure must be defined using Terraform or AWS CDK.",
      "enforcement": "error"
    },
    {
      "name": "CI/CD Pipeline Enforcement",
      "type": "deployment",
      "tools": ["GitHub Actions", "AWS CodePipeline", "GitLab CI"],
      "description": "Code must pass CI/CD validation before deployment.",
      "enforcement": "error"
    },
    {
      "name": "Logging Standardization",
      "type": "observability",
      "description": "Logs must be structured as JSON and integrated with AWS CloudWatch.",
      "enforcement": "error"
    },
    {
      "name": "Async Processing for Agents",
      "type": "performance",
      "tools": ["asyncio", "Celery"],
      "description": "Use async processing frameworks for multi-agent task execution.",
      "enforcement": "warning"
    },
    {
      "name": "State Management for Agents",
      "type": "architecture",
      "tools": ["DynamoDB", "Redis"],
      "description": "Agents must use DynamoDB or Redis for state persistence.",
      "enforcement": "warning"
    },
    {
      "name": "Step-by-Step Development Approach",
      "type": "best-practice",
      "description": "Development must follow a structured step-by-step approach, ensuring tests are written first and validated before writing the actual implementation.",
      "enforcement": "error"
    }
  ]
}
